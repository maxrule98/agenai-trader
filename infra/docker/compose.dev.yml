# Development infrastructure stack for AI-Quant platform
# Services: NATS, ClickHouse, Postgres, Redis, MinIO
# Aligned with .env.example

name: ai-quant-dev

services:
  # ============================================================================
  # NATS - Message broker for event streaming
  # ============================================================================
  nats:
    image: nats:2.10-alpine
    container_name: ai-quant-nats
    ports:
      - "4222:4222" # Client connections
      - "8222:8222" # HTTP monitoring
      - "6222:6222" # Cluster routes
    command:
      - "-js" # Enable JetStream
      - "-sd" # Store directory
      - "/data"
      - "-m" # Monitoring port
      - "8222"
    volumes:
      - nats-data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - ai-quant-net
    restart: unless-stopped

  # ============================================================================
  # ClickHouse - Time-series database for market data and analytics
  # ============================================================================
  clickhouse:
    image: clickhouse/clickhouse-server:24.3-alpine
    container_name: ai-quant-clickhouse
    ports:
      - "8123:8123" # HTTP interface
      - "9000:9000" # Native protocol
    environment:
      CLICKHOUSE_DB: aiquant
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - clickhouse-logs:/var/log/clickhouse-server
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - ai-quant-net
    restart: unless-stopped

  # ============================================================================
  # Postgres - Relational database for configuration, strategies, users
  # ============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: ai-quant-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: aiquant
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d aiquant"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - ai-quant-net
    restart: unless-stopped

  # ============================================================================
  # Redis - Cache and session store
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: ai-quant-redis
    ports:
      - "6379:6379"
    command:
      - "redis-server"
      - "--appendonly"
      - "yes"
      - "--appendfsync"
      - "everysec"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - ai-quant-net
    restart: unless-stopped

  # ============================================================================
  # MinIO - S3-compatible object storage for models, logs, artifacts
  # ============================================================================
  minio:
    image: minio/minio:RELEASE.2024-10-13T13-34-11Z
    container_name: ai-quant-minio
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console UI
    environment:
      MINIO_ROOT_USER: changeme
      MINIO_ROOT_PASSWORD: changeme
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - ai-quant-net
    restart: unless-stopped

  # ============================================================================
  # MinIO Client - Create default bucket on startup
  # ============================================================================
  minio-setup:
    image: minio/mc:RELEASE.2024-10-08T09-37-26Z
    container_name: ai-quant-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 changeme changeme;
      mc mb --ignore-existing local/ai-quant;
      mc anonymous set download local/ai-quant;
      echo 'MinIO bucket ai-quant created and configured';
      exit 0;
      "
    networks:
      - ai-quant-net

# ============================================================================
# Networks
# ============================================================================
networks:
  ai-quant-net:
    driver: bridge
    name: ai-quant-network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  nats-data:
    name: ai-quant-nats-data
  clickhouse-data:
    name: ai-quant-clickhouse-data
  clickhouse-logs:
    name: ai-quant-clickhouse-logs
  postgres-data:
    name: ai-quant-postgres-data
  redis-data:
    name: ai-quant-redis-data
  minio-data:
    name: ai-quant-minio-data
